version: '3.8'

# Security-focused docker-compose configuration
# Includes secrets management, network isolation, and security hardening

secrets:
  jwt_secret:
    file: .env
  mongo_password:
    file: .env
  gemini_api_key:
    file: .env

services:
  # API Gateway - Main entry point
  api-gateway:
    build:
      context: .
      dockerfile: docker/api-gateway.Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - auth-service
      - course-service
      - user-service
      - ai-service
    environment:
      - ENVIRONMENT=production
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
    # Security configurations
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: docker/auth-service.Dockerfile
    ports:
      - "8001:8001"
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_ROOT_PASSWORD:-changeme123}@mongodb:27017/lms_prod?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=production
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./shared:/app/shared
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8001", "--workers", "2"]

  # Course Service
  course-service:
    build:
      context: .
      dockerfile: docker/course-service.Dockerfile
    ports:
      - "8002:8002"
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_ROOT_PASSWORD:-changeme123}@mongodb:27017/lms_prod?authSource=admin
      - REDIS_URL=redis://redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ENVIRONMENT=production
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./shared:/app/shared
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8002", "--workers", "2"]

  # User Service
  user-service:
    build:
      context: .
      dockerfile: docker/user-service.Dockerfile
    ports:
      - "8003:8003"
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_ROOT_PASSWORD:-changeme123}@mongodb:27017/lms_prod?authSource=admin
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./shared:/app/shared
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8003", "--workers", "2"]

  # AI Service
  ai-service:
    build:
      context: .
      dockerfile: docker/ai-service.Dockerfile
    ports:
      - "8004:8004"
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_ROOT_PASSWORD:-changeme123}@mongodb:27017/lms_prod?authSource=admin
      - REDIS_URL=redis://redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ENVIRONMENT=production
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./shared:/app/shared
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8004", "--workers", "2"]

  # Assessment Service
  assessment-service:
    build:
      context: .
      dockerfile: docker/assessment-service.Dockerfile
    ports:
      - "8005:8005"
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_ROOT_PASSWORD:-changeme123}@mongodb:27017/lms_prod?authSource=admin
      - REDIS_URL=redis://redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ENVIRONMENT=production
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./shared:/app/shared
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8005", "--workers", "2"]

  # Analytics Service
  analytics-service:
    build:
      context: .
      dockerfile: docker/analytics-service.Dockerfile
    ports:
      - "8006:8006"
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/lms_prod?authSource=admin
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./shared:/app/shared
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8006", "--workers", "2"]

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: docker/notification-service.Dockerfile
    ports:
      - "8007:8007"
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_ROOT_PASSWORD:-changeme123}@mongodb:27017/lms_prod?authSource=admin
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./shared:/app/shared
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8007", "--workers", "2"]

  # File Service
  file-service:
    build:
      context: .
      dockerfile: docker/file-service.Dockerfile
    ports:
      - "8008:8008"
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_ROOT_PASSWORD:-changeme123}@mongodb:27017/lms_prod?authSource=admin
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./shared:/app/shared
      - file_storage:/app/files
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8008", "--workers", "2"]

  # Redis Cache & Message Queue
  redis:
    image: redis:7.2-alpine
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only for security
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD:-default_password}
    volumes:
      - redis_data:/data
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Security configurations
    security_opt:
      - no-new-privileges:true
    read_only: false  # Redis needs write access
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    ports:
      - "127.0.0.1:27017:27017"  # Bind to localhost only for security
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=lms_prod
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Security configurations
    security_opt:
      - no-new-privileges:true
    read_only: false  # MongoDB needs write access
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Background Job Processor (Celery)
  celery-worker:
    build:
      context: .
      dockerfile: docker/celery-worker.Dockerfile
    environment:
      - MONGO_URL=mongodb://admin:${MONGO_ROOT_PASSWORD:-changeme123}@mongodb:27017/lms_prod?authSource=admin
      - REDIS_URL=redis://redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - mongodb
    volumes:
      - ./shared:/app/shared
    networks:
      - lms-network
    restart: unless-stopped
    command: celery -A backend.tasks worker --loglevel=info --concurrency=4

volumes:
  mongodb_data:
  mongodb_config:
  redis_data:
  file_storage:

networks:
  lms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: lms_bridge
    labels:
      - "security.enabled=true"
      - "traffic.isolation=strict"